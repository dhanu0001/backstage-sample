{"version":3,"file":"validator-ajv8.umd.production.min.js","sources":["../src/createAjvInstance.ts","../src/validator.ts","../src/customizeValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv, { Options } from \"ajv\";\nimport addFormats, { FormatsPluginOptions } from \"ajv-formats\";\nimport isObject from \"lodash/isObject\";\n\nimport { CustomValidatorOptionsType } from \"./types\";\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX =\n  /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType[\"additionalMetaSchemas\"],\n  customFormats?: CustomValidatorOptionsType[\"customFormats\"],\n  ajvOptionsOverrides: CustomValidatorOptionsType[\"ajvOptionsOverrides\"] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false\n) {\n  const ajv = new Ajv({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (typeof ajvFormatOptions !== \"boolean\") {\n    addFormats(ajv, ajvFormatOptions);\n  }\n\n  // add custom formats\n  ajv.addFormat(\"data-url\", DATA_URL_FORMAT_REGEX);\n  ajv.addFormat(\"color\", COLOR_FORMAT_REGEX);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import Ajv, { ErrorObject } from \"ajv\";\nimport toPath from \"lodash/toPath\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FieldValidation,\n  FormValidation,\n  GenericObjectType,\n  RJSFSchema,\n  RJSFValidationError,\n  ValidationData,\n  ValidatorType,\n  getDefaultFormState,\n  isObject,\n  mergeValidationData,\n  ERRORS_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport createAjvInstance from \"./createAjvInstance\";\n\nconst ROOT_SCHEMA_PREFIX = \"__rjsf_rootSchema\";\n\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator<T = any> implements ValidatorType<T> {\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   */\n  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {\n    const {\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions,\n    } = options;\n    this.ajv = createAjvInstance(\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions\n    );\n    this.localizer = localizer;\n  }\n\n  /** Transforms a ajv validation errors list:\n   * [\n   *   {property: '.level1.level2[2].level3', message: 'err a'},\n   *   {property: '.level1.level2[2].level3', message: 'err b'},\n   *   {property: '.level1.level2[4].level3', message: 'err b'},\n   * ]\n   * Into an error tree:\n   * {\n   *   level1: {\n   *     level2: {\n   *       2: {level3: {errors: ['err a', 'err b']}},\n   *       4: {level3: {errors: ['err b']}},\n   *     }\n   *   }\n   * };\n   *\n   * @param errors - The list of RJSFValidationError objects\n   * @private\n   */\n  private toErrorSchema(errors: RJSFValidationError[]): ErrorSchema<T> {\n    if (!errors.length) {\n      return {} as ErrorSchema<T>;\n    }\n    return errors.reduce(\n      (errorSchema: ErrorSchema<T>, error): ErrorSchema<T> => {\n        const { property, message } = error;\n        const path = toPath(property);\n        let parent: GenericObjectType = errorSchema;\n\n        // If the property is at the root (.level1) then toPath creates\n        // an empty array element at the first index. Remove it.\n        if (path.length > 0 && path[0] === \"\") {\n          path.splice(0, 1);\n        }\n\n        for (const segment of path.slice(0)) {\n          if (!(segment in parent)) {\n            parent[segment] = {};\n          }\n          parent = parent[segment];\n        }\n\n        if (Array.isArray(parent.__errors)) {\n          // We store the list of errors for this node in a property named __errors\n          // to avoid name collision with a possible sub schema field named\n          // 'errors' (see `validate.createErrorHandler`).\n          parent.__errors = parent.__errors.concat(message!);\n        } else {\n          if (message) {\n            parent.__errors = [message];\n          }\n        }\n        return errorSchema;\n      },\n      {} as ErrorSchema<T>\n    );\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    if (!errorSchema) {\n      return [];\n    }\n    let errorList: RJSFValidationError[] = [];\n    if (ERRORS_KEY in errorSchema) {\n      errorList = errorList.concat(\n        errorSchema.__errors!.map((message: string) => {\n          const property = `.${fieldPath.join(\".\")}`;\n          return {\n            property,\n            message,\n            stack: `${property} ${message}`,\n          };\n        })\n      );\n    }\n    return Object.keys(errorSchema).reduce((acc, key) => {\n      if (key !== ERRORS_KEY) {\n        acc = acc.concat(\n          this.toErrorList((errorSchema as GenericObjectType)[key], [\n            ...fieldPath,\n            key,\n          ])\n        );\n      }\n      return acc;\n    }, errorList);\n  }\n\n  /** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n   *\n   * @param formData - The form data around which the error handler is created\n   * @private\n   */\n  private createErrorHandler(formData: T): FormValidation<T> {\n    const handler: FieldValidation = {\n      // We store the list of errors for this node in a property named __errors\n      // to avoid name collision with a possible sub schema field named\n      // 'errors' (see `utils.toErrorSchema`).\n      __errors: [],\n      addError(message: string) {\n        this.__errors!.push(message);\n      },\n    };\n    if (isObject(formData)) {\n      const formObject: GenericObjectType = formData as GenericObjectType;\n      return Object.keys(formObject).reduce((acc, key) => {\n        return { ...acc, [key]: this.createErrorHandler(formObject[key]) };\n      }, handler as FormValidation<T>);\n    }\n    if (Array.isArray(formData)) {\n      return formData.reduce((acc, value, key) => {\n        return { ...acc, [key]: this.createErrorHandler(value) };\n      }, handler);\n    }\n    return handler as FormValidation<T>;\n  }\n\n  /** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError` functions from it\n   *\n   * @param errorHandler - The `FormValidation` error handling structure\n   * @private\n   */\n  private unwrapErrorHandler(errorHandler: FormValidation<T>): ErrorSchema<T> {\n    return Object.keys(errorHandler).reduce((acc, key) => {\n      if (key === \"addError\") {\n        return acc;\n      } else if (key === ERRORS_KEY) {\n        return { ...acc, [key]: (errorHandler as GenericObjectType)[key] };\n      }\n      return {\n        ...acc,\n        [key]: this.unwrapErrorHandler(\n          (errorHandler as GenericObjectType)[key]\n        ),\n      };\n    }, {} as ErrorSchema<T>);\n  }\n\n  /** Transforming the error output from ajv to format used by @rjsf/utils.\n   * At some point, components should be updated to support ajv.\n   *\n   * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n   * @private\n   */\n  private transformRJSFValidationErrors(\n    errors: Ajv[\"errors\"] = []\n  ): RJSFValidationError[] {\n    if (errors === null) {\n      return [];\n    }\n\n    return errors.map((e: ErrorObject) => {\n      const { instancePath, keyword, message, params, schemaPath } = e;\n      const property = instancePath.replace(/\\//g, \".\");\n\n      // put data in expected format\n      return {\n        name: keyword,\n        property,\n        message,\n        params, // specific to ajv\n        stack: `${property} ${message}`.trim(),\n        schemaPath,\n      };\n    });\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   */\n  validateFormData(\n    formData: T,\n    schema: RJSFSchema,\n    customValidate?: CustomValidator<T>,\n    transformErrors?: ErrorTransformer\n  ): ValidationData<T> {\n    // Include form data with undefined values, which is required for validation.\n    const rootSchema = schema;\n    const newFormData = getDefaultFormState<T>(\n      this,\n      schema,\n      formData,\n      rootSchema,\n      true\n    ) as T;\n\n    let validationError: Error | null = null;\n    try {\n      this.ajv.validate(schema, newFormData);\n    } catch (err) {\n      validationError = err as Error;\n    }\n\n    if (typeof this.localizer === \"function\") {\n      this.localizer(this.ajv.errors);\n    }\n    let errors = this.transformRJSFValidationErrors(this.ajv.errors);\n    // Clear errors to prevent persistent errors, see #1104\n\n    this.ajv.errors = null;\n\n    const noProperMetaSchema =\n      validationError &&\n      validationError.message &&\n      typeof validationError.message === \"string\" &&\n      validationError.message.includes(\"no schema with key or ref \");\n\n    if (noProperMetaSchema) {\n      errors = [...errors, { stack: validationError!.message }];\n    }\n    if (typeof transformErrors === \"function\") {\n      errors = transformErrors(errors);\n    }\n\n    let errorSchema = this.toErrorSchema(errors);\n\n    if (noProperMetaSchema) {\n      errorSchema = {\n        ...errorSchema,\n        ...{\n          $schema: {\n            __errors: [validationError!.message],\n          },\n        },\n      };\n    }\n\n    if (typeof customValidate !== \"function\") {\n      return { errors, errorSchema };\n    }\n\n    const errorHandler = customValidate(\n      newFormData,\n      this.createErrorHandler(newFormData)\n    );\n    const userErrorSchema = this.unwrapErrorHandler(errorHandler);\n    return mergeValidationData<T>(\n      this,\n      { errors, errorSchema },\n      userErrorSchema\n    );\n  }\n\n  /** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixObject(node: object) {\n    for (const key in node) {\n      const realObj: { [k: string]: any } = node;\n      const value = realObj[key];\n      if (\n        key === REF_KEY &&\n        typeof value === \"string\" &&\n        value.startsWith(\"#\")\n      ) {\n        realObj[key] = ROOT_SCHEMA_PREFIX + value;\n      } else {\n        realObj[key] = this.withIdRefPrefix(value);\n      }\n    }\n    return node;\n  }\n\n  /** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param nodeThe - list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixArray(node: object[]): RJSFSchema {\n    for (let i = 0; i < node.length; i++) {\n      node[i] = this.withIdRefPrefix(node[i]);\n    }\n    return node as RJSFSchema;\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData- - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: RJSFSchema, formData: T, rootSchema: RJSFSchema) {\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      const result = this.ajv\n        .addSchema(rootSchema, ROOT_SCHEMA_PREFIX)\n        .validate(this.withIdRefPrefix(schema), formData);\n      return result as boolean;\n    } catch (e) {\n      return false;\n    } finally {\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(ROOT_SCHEMA_PREFIX);\n    }\n  }\n\n  /** Recursively prefixes all $ref's in a schema with `ROOT_SCHEMA_PREFIX`\n   * This is used in isValid to make references to the rootSchema\n   *\n   * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @protected\n   */\n  protected withIdRefPrefix(schemaNode: RJSFSchema): RJSFSchema {\n    if (schemaNode.constructor === Object) {\n      return this.withIdRefPrefixObject({ ...schemaNode });\n    }\n    if (Array.isArray(schemaNode)) {\n      return this.withIdRefPrefixArray([...schemaNode]);\n    }\n    return schemaNode;\n  }\n}\n","import { ValidatorType } from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport AJV8Validator from \"./validator\";\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n */\nexport default function customizeValidator<T = any>(\n  options: CustomValidatorOptionsType = {},\n  localizer?: Localizer\n): ValidatorType<T> {\n  return new AJV8Validator<T>(options, localizer);\n}\n","import customizeValidator from \"./customizeValidator\";\n\nexport { customizeValidator };\nexport * from \"./types\";\n\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","allErrors","multipleOfPrecision","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","ROOT_SCHEMA_PREFIX","AJV8Validator","constructor","options","localizer","this","ajv","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","Ajv","addFormats","addFormat","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","createAjvInstance","toErrorSchema","errors","length","reduce","errorSchema","error","property","message","path","toPath","parent","splice","segment","slice","__errors","concat","toErrorList","fieldPath","errorList","ERRORS_KEY","map","join","stack","acc","key","createErrorHandler","formData","handler","addError","push","formObject","value","unwrapErrorHandler","errorHandler","transformRJSFValidationErrors","e","instancePath","keyword","params","schemaPath","replace","name","trim","validateFormData","schema","customValidate","transformErrors","newFormData","getDefaultFormState","validationError","validate","err","noProperMetaSchema","includes","$schema","userErrorSchema","mergeValidationData","withIdRefPrefixObject","node","REF_KEY","startsWith","withIdRefPrefix","withIdRefPrefixArray","i","isValid","rootSchema","addSchema","removeSchema","schemaNode","customizeValidator","index"],"mappings":"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"}
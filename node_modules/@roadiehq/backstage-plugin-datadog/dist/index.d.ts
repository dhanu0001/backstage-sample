import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { DiscoveryApi } from '@backstage/core-plugin-api';
import { Entity } from '@backstage/catalog-model';

declare const isDatadogDashboardAvailable: (entity: Entity) => boolean;
declare const isDatadogGraphAvailable: (entity: Entity) => boolean;
declare const isDatadogAvailable: (entity: Entity) => boolean;
declare const datadogPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    entityContent: _backstage_core_plugin_api.RouteRef<undefined>;
}, {}, {}>;
declare const EntityDatadogContent: () => JSX.Element;
declare const EntityDatadogGraphCard: () => JSX.Element;

interface DatadogApi {
}
declare const datadogApiRef: _backstage_core_plugin_api.ApiRef<DatadogApi>;
declare type Options = {
    discoveryApi: DiscoveryApi;
    proxyPath?: string;
};
declare class DatadogApiClient implements DatadogApi {
    private readonly discoveryApi;
    constructor(options: Options);
}

/**
 * @deprecated since v0.2.0 you should use new composability API
 */
declare const Router: () => JSX.Element;

/**
 * @deprecated since v0.2.0 you should use new composability API
 */
declare const GraphWidget: () => JSX.Element;

export { DatadogApi, DatadogApiClient, EntityDatadogContent, EntityDatadogGraphCard, GraphWidget, Options, Router, datadogApiRef, isDatadogAvailable, isDatadogDashboardAvailable, isDatadogGraphAvailable, datadogPlugin as plugin };

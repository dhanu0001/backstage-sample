{"version":3,"file":"core.umd.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/index.ts","../src/components/fields/BooleanField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/index.ts","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  Field,\n  FieldProps,\n  IdSchema,\n  RJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, F = any> extends Component<\n  FieldProps<T[], F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, F = any>(\n    nextProps: Readonly<FieldProps<T[], F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: RJSFSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as RJSFSchema;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as RJSFSchema;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema)\n      : {};\n    const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(\n      schema.items as RJSFSchema,\n      items\n    );\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], F>(uiSchema);\n    const Widget = getWidget<T[], F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems = isObject(schema.items)\n      ? (schema.items as RJSFSchema[])\n      : [];\n    const itemSchemas = _schemaItems.map((item: RJSFSchema, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: RJSFSchema;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], F>[\"onBlur\"];\n    onFocus: FieldProps<T[], F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField as unknown as Field;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  AnyOfFieldState\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T,\n    options: RJSFSchema[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change.\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, F>(uiSchema);\n    const Widget = getWidget<T, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 }}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport { asNumber, FieldProps } from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  RJSFSchemaDefinition,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T, F>(\n  schema: RJSFSchema,\n  uiOptions: UIOptionsType<T, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T, F>(props: FieldProps<T, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema: RJSFSchemaDefinition) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? _schema : {},\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, F = any> extends React.Component<FieldProps<T, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import { RegistryFieldsType } from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nconst fields: RegistryFieldsType = {\n  AnyOfField: MultiSchemaField,\n  ArrayField,\n  // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n  BooleanField,\n  NumberField,\n  ObjectField,\n  OneOfField: MultiSchemaField,\n  SchemaField,\n  StringField,\n  NullField,\n};\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  RJSFSchemaDefinition,\n  EnumOptionsType,\n  RJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf\n        .map((option: RJSFSchemaDefinition) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o) => o) as RJSFSchemaDefinition[], // cast away the error that typescript can't grok is fixed\n    });\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as RJSFSchema & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as RJSFSchema);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, F = any> extends Component<\n  FieldProps<T, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: RJSFSchema) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] },\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, F = any>(props: FieldProps<T, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, F>(uiSchema);\n  const Widget = getWidget<T, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport { FieldProps } from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, F = any>(props: FieldProps<T, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nexport default function IconButton(props: IconButtonProps) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton(props: IconButtonProps) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nconst templates: TemplatesType = {\n  ArrayFieldDescriptionTemplate,\n  ArrayFieldItemTemplate,\n  ArrayFieldTemplate,\n  ArrayFieldTitleTemplate,\n  ButtonTemplates,\n  BaseInputTemplate,\n  DescriptionFieldTemplate: DescriptionField,\n  ErrorListTemplate: ErrorList,\n  FieldTemplate,\n  FieldErrorTemplate,\n  FieldHelpTemplate,\n  ObjectFieldTemplate,\n  TitleFieldTemplate: TitleField,\n  UnsupportedFieldTemplate: UnsupportedField,\n  WrapIfAdditionalTemplate,\n};\n\nexport default templates;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<T = any, F = any>(\n  props: ArrayFieldDescriptionProps\n) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport { ArrayFieldTemplateItemType } from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateItemType<T, F>\n) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<T = any, F = any>(\n  props: ArrayFieldTemplateProps<T, F>\n) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\"ArrayFieldTitleTemplate\", T, F>(\n    \"ArrayFieldTitleTemplate\",\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<T = any, F = any>(\n  props: ArrayFieldTitleProps\n) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { TemplatesType } from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nconst buttonTemplates: TemplatesType[\"ButtonTemplates\"] = {\n  SubmitButton,\n  AddButton,\n  MoveDownButton,\n  MoveUpButton,\n  RemoveButton,\n};\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport { getSubmitButtonOptions, SubmitButtonProps } from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<T, F>({\n  uiSchema,\n}: SubmitButtonProps<T, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { IconButtonProps } from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton({\n  className,\n  onClick,\n  disabled,\n}: IconButtonProps) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getInputProps, WidgetProps } from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = { ...rest, ...getInputProps<T, F>(schema, type, options) };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { DescriptionFieldProps } from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<T = any, F = any>(\n  props: DescriptionFieldProps<T, F>\n) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { ErrorListProps, RJSFValidationError } from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any>({ errors }: ErrorListProps<T>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldTemplateProps, getTemplate, getUiOptions } from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<T = any, F = any>(\n  props: FieldTemplateProps<T, F>\n) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\"WrapIfAdditionalTemplate\">(\n    \"WrapIfAdditionalTemplate\",\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport { FieldErrorProps } from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<T = any, F = any>(\n  props: FieldErrorProps<T, F>\n) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FieldHelpProps } from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<T = any, F = any>(\n  props: FieldHelpProps<T, F>\n) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<T = any, F = any>(\n  props: ObjectFieldTemplateProps<T, F>\n) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport { TitleFieldProps } from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, F = any>(\n  props: TitleFieldProps<T, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport { UnsupportedFieldProps } from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, F = any>(\n  props: UnsupportedFieldProps<T, F>\n) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<T = any, F = any>(\n  props: WrapIfAdditionalTemplateProps<T, F>\n) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  WidgetProps,\n  DateObject,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T, F> = Pick<\n  WidgetProps<T, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T, F>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" }}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, F = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { dataURItoBlob, WidgetProps } from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T, F>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport { processSelectValue, WidgetProps } from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, F = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, F = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { RegistryWidgetsType } from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nconst widgets: RegistryWidgetsType = {\n  PasswordWidget,\n  RadioWidget,\n  UpDownWidget,\n  RangeWidget,\n  SelectWidget,\n  TextWidget,\n  DateWidget,\n  DateTimeWidget,\n  AltDateWidget,\n  AltDateTimeWidget,\n  EmailWidget,\n  URLWidget,\n  TextareaWidget,\n  HiddenWidget,\n  ColorWidget,\n  FileWidget,\n  CheckboxWidget,\n  CheckboxesWidget,\n};\n\nexport default widgets;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, F = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport { getTemplate, localToUTC, utcToLocal, WidgetProps } from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { WidgetProps } from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, F = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, F = any>(props: WidgetProps<T, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, F = any>({ id, value }: WidgetProps<T, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport { getTemplate, WidgetProps } from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, F = any>(\n  props: WidgetProps<T, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { getTemplate, schemaRequiresTrueValue, WidgetProps } from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, F = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport { WidgetProps } from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, F = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { Registry } from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<T = any, F = any>(): Omit<\n  Registry<T, F>,\n  \"schemaUtils\"\n> {\n  return {\n    fields,\n    templates,\n    widgets,\n    rootSchema: {},\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  GenericObjectType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  RJSFValidationError,\n  Registry,\n  RegistryWidgetsType,\n  RegistryFieldsType,\n  SchemaUtilsType,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  createSchemaUtils,\n  deepEquals,\n  getTemplate,\n  getUiOptions,\n  isObject,\n  mergeObjects,\n  shouldRender,\n  NAME_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\nimport _pick from \"lodash/pick\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to true, a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `true` by default\n   */\n  showErrorList?: boolean;\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, F = any> {\n  /** The JSON schema object for the form */\n  schema: RJSFSchema;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, F = any>\n  extends Omit<\n    FormState<T, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<T = any, F = any> extends Component<\n  FormProps<T, F>,\n  FormState<T, F>\n> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, F>,\n    inputFormData?: T\n  ): FormState<T, F> {\n    const state: FormState<T, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, F>,\n    nextState: FormState<T, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { showErrorList, formContext } = this.props;\n    const options = getUiOptions<T, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length && showErrorList != false) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    const data: GenericObjectType = _pick(formData, fields);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T) => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[] = [],\n      paths = [\"\"]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => `${path}.${key}`);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            path = path.replace(/^\\./, \"\");\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, true) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, F = any> = Pick<\n  FormProps<T, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, F = any>(\n  themeProps: ThemeProps<T, F>\n) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, F>,\n      ref: ForwardedRef<Form<T, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","AnyOfField","Component","constructor","props","super","this","onOptionChange","option","selectedOption","parseInt","onChange","options","registry","schemaUtils","newOption","retrieveSchema","newFormData","guessType","type","properties","Object","assign","optionsToDiscard","slice","splice","unset","getDefaultFormState","undefined","getFieldId","setState","state","getMatchingOption","componentDidUpdate","prevProps","prevState","idSchema","deepEquals","$id","matchingOption","schema","oneOf","render","name","baseType","disabled","readonly","hideError","errorSchema","formContext","idPrefix","idSeparator","onBlur","onFocus","uiSchema","widgets","fields","SchemaField","_SchemaField","widget","uiOptions","getUiOptions","Widget","getWidget","optionSchema","enumOptions","index","label","title","value","React","createElement","className","id","default","trailingCharMatcherWithPrefix","trailingCharMatcher","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","onKeyChange","onDropPropertyClick","required","wasPropertyKeyModified","FieldTemplate","getTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","toIdSchema","handleFieldComponentChange","useCallback","newErrorSchema","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","UnsupportedFieldTemplate","reason","getFieldComponent","Boolean","readOnly","uiSchemaHideError","autofocus","keys","length","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","fieldUiSchema","omit","rawErrors","ADDITIONAL_PROPERTY_FLAG","description","help","hidden","classNames","push","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","isObject","MultiSchemaField","ArrayField","_getNewFormDataRow","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","onAddClick","event","preventDefault","newKeyedFormData","updatedKeyedFormData","onAddIndexClick","newKeyedFormDataRow","onDropIndexClick","idx","i","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_newKeyedFormData","reOrderArray","onChangeForIndex","onSelectChange","static","nextProps","nextFormData","previousKeyedFormData","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","includes","canAddItem","formItems","addable","maxItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_schemaItems","itemsSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","Template","placeholder","multiple","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","ArraySchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","const","o","_schema$enum","schemaWithEnumNames","enums","enum","enumNames","every","v","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_this","arguments","additionalProperties","onPropertyChange","addedByAdditionalProperties","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","fieldIdSchema","content","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","IconButton","iconType","icon","otherProps","Label","htmlFor","templates","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","_ref","itemProps","TitleFieldTemplate","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","BaseInputTemplate","rest","console","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","Set","example","ErrorListTemplate","error","stack","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","defaultValue","border","rangeOptions","start","stop","pad","DateElement","range","select","rootId","SelectWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","getValue","from","selected","TextareaWidget","handleBlur","handleFocus","_ref4","rows","defaultProps","PasswordWidget","RadioWidget","Math","random","toString","enumDisabled","inline","checked","itemDisabled","disabledCls","radio","UpDownWidget","RangeWidget","newValue","processSelectValue","TextWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","AltDateWidget","time","useReducer","action","parseDateString","toDateString","values","readyForChange","property","handleSetNow","nowDateObj","Date","toJSON","handleClear","yearsRange","getFullYear","year","month","day","hour","minute","second","data","dateElementProps","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","EmailWidget","URLWidget","HiddenWidget","ColorWidget","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","all","then","filesInfoEvent","accept","String","CheckboxWidget","schemaRequiresTrueValue","CheckboxesWidget","checkbox","at","sort","a","b","Number","selectValue","deselectValue","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","showErrorList","getRegistry","_this$props$templates","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","_internalFormWrapper","encType","acceptCharset","as","ref","themeProps","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}
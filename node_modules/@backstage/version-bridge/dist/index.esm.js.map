{"version":3,"file":"index.esm.js","sources":["../src/lib/globalObject.ts","../src/lib/VersionedValue.ts","../src/lib/VersionedContext.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nfunction getGlobalObject() {\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  }\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n  // eslint-disable-next-line no-new-func\n  return Function('return this')();\n}\n\nconst globalObject = getGlobalObject();\n\nconst makeKey = (id: string) => `__@backstage/${id}__`;\n\n/**\n * Serializes access to a global singleton value, with the first caller creating the value.\n *\n * @public\n */\nexport function getOrCreateGlobalSingleton<T>(\n  id: string,\n  supplier: () => T,\n): T {\n  const key = makeKey(id);\n\n  let value = globalObject[key];\n  if (value) {\n    return value;\n  }\n\n  value = supplier();\n  globalObject[key] = value;\n  return value;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The versioned value interface is a container for a set of values that\n * can be looked up by version. It is intended to be used as a container\n * for values that can be versioned independently of package versions.\n *\n * @public\n */\nexport type VersionedValue<Versions extends { [version: number]: unknown }> = {\n  atVersion<Version extends keyof Versions>(\n    version: Version,\n  ): Versions[Version] | undefined;\n};\n\n/**\n * Creates a container for a map of versioned values that implements VersionedValue.\n *\n * @public\n */\nexport function createVersionedValueMap<\n  Versions extends { [version: number]: unknown },\n>(versions: Versions): VersionedValue<Versions> {\n  Object.freeze(versions);\n  return {\n    atVersion(version) {\n      return versions[version];\n    },\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContext, useContext, Context } from 'react';\nimport { getOrCreateGlobalSingleton } from './globalObject';\nimport { createVersionedValueMap, VersionedValue } from './VersionedValue';\n\n/**\n * Get the existing or create a new versioned React context that's\n * stored inside a global singleton.\n *\n * @param key - A key that uniquely identifies the context.\n * @public\n * @example\n *\n * ```ts\n * const MyContext = createVersionedContext<{ 1: string }>('my-context');\n *\n * const MyContextProvider = ({children}) => (\n *   <MyContext.Provider value={createVersionedValueMap({ 1: 'value-for-version-1' })}>\n *     {children}\n *   <MyContext.Provider>\n * )\n * ```\n */\nexport function createVersionedContext<\n  Versions extends { [version in number]: unknown },\n>(key: string): Context<VersionedValue<Versions> | undefined> {\n  return getOrCreateGlobalSingleton(key, () =>\n    createContext<VersionedValue<Versions> | undefined>(undefined),\n  );\n}\n\n/**\n * A hook that simplifies the consumption of a versioned contexts that's\n * stored inside a global singleton.\n *\n * @param key - A key that uniquely identifies the context.\n * @public\n * @example\n *\n * ```ts\n * const versionedHolder = useVersionedContext<{ 1: string }>('my-context');\n *\n * if (!versionedHolder) {\n *   throw new Error('My context is not available!')\n * }\n *\n * const myValue = versionedHolder.atVersion(1);\n *\n * // ...\n * ```\n */\nexport function useVersionedContext<\n  Versions extends { [version in number]: unknown },\n>(key: string): VersionedValue<Versions> | undefined {\n  return useContext(createVersionedContext<Versions>(key));\n}\n\n/**\n * Creates a helper for writing tests towards multiple different\n * combinations of versions provided from a context.\n *\n * @param key - A key that uniquely identifies the context.\n * @public\n * @example\n *\n * ```ts\n * const context = createVersionedContextForTesting('my-context');\n *\n * afterEach(() => {\n *   context.reset();\n * });\n *\n * it('should work when provided with version 1', () => {\n *   context.set({1: 'value-for-version-1'})\n *\n *   // ...\n * })\n * ```\n */\nexport function createVersionedContextForTesting(key: string) {\n  return {\n    set(versions: { [version in number]: unknown }) {\n      (globalThis as any)[`__@backstage/${key}__`] = createContext(\n        createVersionedValueMap(versions),\n      );\n    },\n    reset() {\n      delete (globalThis as any)[`__@backstage/${key}__`];\n    },\n  };\n}\n"],"names":[],"mappings":";;AAAA,SAAS,eAAe,GAAG;AAC3B,EAAE,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;AAC7D,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH,EAAE,IAAI,OAAO,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;AACzD,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,OAAO,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;AACnC,CAAC;AACD,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;AACvC,MAAM,OAAO,GAAG,CAAC,EAAE,KAAK,CAAC,aAAa,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;AACxC,SAAS,0BAA0B,CAAC,EAAE,EAAE,QAAQ,EAAE;AACzD,EAAE,MAAM,GAAG,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;AAC1B,EAAE,IAAI,KAAK,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;AAChC,EAAE,IAAI,KAAK,EAAE;AACb,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG;AACH,EAAE,KAAK,GAAG,QAAQ,EAAE,CAAC;AACrB,EAAE,YAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AAC5B,EAAE,OAAO,KAAK,CAAC;AACf;;ACpBO,SAAS,uBAAuB,CAAC,QAAQ,EAAE;AAClD,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC1B,EAAE,OAAO;AACT,IAAI,SAAS,CAAC,OAAO,EAAE;AACvB,MAAM,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC/B,KAAK;AACL,GAAG,CAAC;AACJ;;ACJO,SAAS,sBAAsB,CAAC,GAAG,EAAE;AAC5C,EAAE,OAAO,0BAA0B,CAAC,GAAG,EAAE,MAAM,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC;AACM,SAAS,mBAAmB,CAAC,GAAG,EAAE;AACzC,EAAE,OAAO,UAAU,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC;AACjD,CAAC;AACM,SAAS,gCAAgC,CAAC,GAAG,EAAE;AACtD,EAAE,OAAO;AACT,IAAI,GAAG,CAAC,QAAQ,EAAE;AAClB,MAAM,UAAU,CAAC,CAAC,aAAa,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC7F,KAAK;AACL,IAAI,KAAK,GAAG;AACZ,MAAM,OAAO,UAAU,CAAC,CAAC,aAAa,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AACjD,KAAK;AACL,GAAG,CAAC;AACJ;;;;"}
{"version":3,"file":"validator-ajv8.umd.development.js","sources":["../src/createAjvInstance.ts","../src/validator.ts","../src/customizeValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv, { Options } from \"ajv\";\nimport addFormats, { FormatsPluginOptions } from \"ajv-formats\";\nimport isObject from \"lodash/isObject\";\n\nimport { CustomValidatorOptionsType } from \"./types\";\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX =\n  /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType[\"additionalMetaSchemas\"],\n  customFormats?: CustomValidatorOptionsType[\"customFormats\"],\n  ajvOptionsOverrides: CustomValidatorOptionsType[\"ajvOptionsOverrides\"] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false\n) {\n  const ajv = new Ajv({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (typeof ajvFormatOptions !== \"boolean\") {\n    addFormats(ajv, ajvFormatOptions);\n  }\n\n  // add custom formats\n  ajv.addFormat(\"data-url\", DATA_URL_FORMAT_REGEX);\n  ajv.addFormat(\"color\", COLOR_FORMAT_REGEX);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import Ajv, { ErrorObject } from \"ajv\";\nimport toPath from \"lodash/toPath\";\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FieldValidation,\n  FormValidation,\n  GenericObjectType,\n  RJSFSchema,\n  RJSFValidationError,\n  ValidationData,\n  ValidatorType,\n  getDefaultFormState,\n  isObject,\n  mergeValidationData,\n  ERRORS_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport createAjvInstance from \"./createAjvInstance\";\n\nconst ROOT_SCHEMA_PREFIX = \"__rjsf_rootSchema\";\n\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator<T = any> implements ValidatorType<T> {\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   */\n  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {\n    const {\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions,\n    } = options;\n    this.ajv = createAjvInstance(\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions\n    );\n    this.localizer = localizer;\n  }\n\n  /** Transforms a ajv validation errors list:\n   * [\n   *   {property: '.level1.level2[2].level3', message: 'err a'},\n   *   {property: '.level1.level2[2].level3', message: 'err b'},\n   *   {property: '.level1.level2[4].level3', message: 'err b'},\n   * ]\n   * Into an error tree:\n   * {\n   *   level1: {\n   *     level2: {\n   *       2: {level3: {errors: ['err a', 'err b']}},\n   *       4: {level3: {errors: ['err b']}},\n   *     }\n   *   }\n   * };\n   *\n   * @param errors - The list of RJSFValidationError objects\n   * @private\n   */\n  private toErrorSchema(errors: RJSFValidationError[]): ErrorSchema<T> {\n    if (!errors.length) {\n      return {} as ErrorSchema<T>;\n    }\n    return errors.reduce(\n      (errorSchema: ErrorSchema<T>, error): ErrorSchema<T> => {\n        const { property, message } = error;\n        const path = toPath(property);\n        let parent: GenericObjectType = errorSchema;\n\n        // If the property is at the root (.level1) then toPath creates\n        // an empty array element at the first index. Remove it.\n        if (path.length > 0 && path[0] === \"\") {\n          path.splice(0, 1);\n        }\n\n        for (const segment of path.slice(0)) {\n          if (!(segment in parent)) {\n            parent[segment] = {};\n          }\n          parent = parent[segment];\n        }\n\n        if (Array.isArray(parent.__errors)) {\n          // We store the list of errors for this node in a property named __errors\n          // to avoid name collision with a possible sub schema field named\n          // 'errors' (see `validate.createErrorHandler`).\n          parent.__errors = parent.__errors.concat(message!);\n        } else {\n          if (message) {\n            parent.__errors = [message];\n          }\n        }\n        return errorSchema;\n      },\n      {} as ErrorSchema<T>\n    );\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    if (!errorSchema) {\n      return [];\n    }\n    let errorList: RJSFValidationError[] = [];\n    if (ERRORS_KEY in errorSchema) {\n      errorList = errorList.concat(\n        errorSchema.__errors!.map((message: string) => {\n          const property = `.${fieldPath.join(\".\")}`;\n          return {\n            property,\n            message,\n            stack: `${property} ${message}`,\n          };\n        })\n      );\n    }\n    return Object.keys(errorSchema).reduce((acc, key) => {\n      if (key !== ERRORS_KEY) {\n        acc = acc.concat(\n          this.toErrorList((errorSchema as GenericObjectType)[key], [\n            ...fieldPath,\n            key,\n          ])\n        );\n      }\n      return acc;\n    }, errorList);\n  }\n\n  /** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n   *\n   * @param formData - The form data around which the error handler is created\n   * @private\n   */\n  private createErrorHandler(formData: T): FormValidation<T> {\n    const handler: FieldValidation = {\n      // We store the list of errors for this node in a property named __errors\n      // to avoid name collision with a possible sub schema field named\n      // 'errors' (see `utils.toErrorSchema`).\n      __errors: [],\n      addError(message: string) {\n        this.__errors!.push(message);\n      },\n    };\n    if (isObject(formData)) {\n      const formObject: GenericObjectType = formData as GenericObjectType;\n      return Object.keys(formObject).reduce((acc, key) => {\n        return { ...acc, [key]: this.createErrorHandler(formObject[key]) };\n      }, handler as FormValidation<T>);\n    }\n    if (Array.isArray(formData)) {\n      return formData.reduce((acc, value, key) => {\n        return { ...acc, [key]: this.createErrorHandler(value) };\n      }, handler);\n    }\n    return handler as FormValidation<T>;\n  }\n\n  /** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError` functions from it\n   *\n   * @param errorHandler - The `FormValidation` error handling structure\n   * @private\n   */\n  private unwrapErrorHandler(errorHandler: FormValidation<T>): ErrorSchema<T> {\n    return Object.keys(errorHandler).reduce((acc, key) => {\n      if (key === \"addError\") {\n        return acc;\n      } else if (key === ERRORS_KEY) {\n        return { ...acc, [key]: (errorHandler as GenericObjectType)[key] };\n      }\n      return {\n        ...acc,\n        [key]: this.unwrapErrorHandler(\n          (errorHandler as GenericObjectType)[key]\n        ),\n      };\n    }, {} as ErrorSchema<T>);\n  }\n\n  /** Transforming the error output from ajv to format used by @rjsf/utils.\n   * At some point, components should be updated to support ajv.\n   *\n   * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n   * @private\n   */\n  private transformRJSFValidationErrors(\n    errors: Ajv[\"errors\"] = []\n  ): RJSFValidationError[] {\n    if (errors === null) {\n      return [];\n    }\n\n    return errors.map((e: ErrorObject) => {\n      const { instancePath, keyword, message, params, schemaPath } = e;\n      const property = instancePath.replace(/\\//g, \".\");\n\n      // put data in expected format\n      return {\n        name: keyword,\n        property,\n        message,\n        params, // specific to ajv\n        stack: `${property} ${message}`.trim(),\n        schemaPath,\n      };\n    });\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   */\n  validateFormData(\n    formData: T,\n    schema: RJSFSchema,\n    customValidate?: CustomValidator<T>,\n    transformErrors?: ErrorTransformer\n  ): ValidationData<T> {\n    // Include form data with undefined values, which is required for validation.\n    const rootSchema = schema;\n    const newFormData = getDefaultFormState<T>(\n      this,\n      schema,\n      formData,\n      rootSchema,\n      true\n    ) as T;\n\n    let validationError: Error | null = null;\n    try {\n      this.ajv.validate(schema, newFormData);\n    } catch (err) {\n      validationError = err as Error;\n    }\n\n    if (typeof this.localizer === \"function\") {\n      this.localizer(this.ajv.errors);\n    }\n    let errors = this.transformRJSFValidationErrors(this.ajv.errors);\n    // Clear errors to prevent persistent errors, see #1104\n\n    this.ajv.errors = null;\n\n    const noProperMetaSchema =\n      validationError &&\n      validationError.message &&\n      typeof validationError.message === \"string\" &&\n      validationError.message.includes(\"no schema with key or ref \");\n\n    if (noProperMetaSchema) {\n      errors = [...errors, { stack: validationError!.message }];\n    }\n    if (typeof transformErrors === \"function\") {\n      errors = transformErrors(errors);\n    }\n\n    let errorSchema = this.toErrorSchema(errors);\n\n    if (noProperMetaSchema) {\n      errorSchema = {\n        ...errorSchema,\n        ...{\n          $schema: {\n            __errors: [validationError!.message],\n          },\n        },\n      };\n    }\n\n    if (typeof customValidate !== \"function\") {\n      return { errors, errorSchema };\n    }\n\n    const errorHandler = customValidate(\n      newFormData,\n      this.createErrorHandler(newFormData)\n    );\n    const userErrorSchema = this.unwrapErrorHandler(errorHandler);\n    return mergeValidationData<T>(\n      this,\n      { errors, errorSchema },\n      userErrorSchema\n    );\n  }\n\n  /** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixObject(node: object) {\n    for (const key in node) {\n      const realObj: { [k: string]: any } = node;\n      const value = realObj[key];\n      if (\n        key === REF_KEY &&\n        typeof value === \"string\" &&\n        value.startsWith(\"#\")\n      ) {\n        realObj[key] = ROOT_SCHEMA_PREFIX + value;\n      } else {\n        realObj[key] = this.withIdRefPrefix(value);\n      }\n    }\n    return node;\n  }\n\n  /** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param nodeThe - list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixArray(node: object[]): RJSFSchema {\n    for (let i = 0; i < node.length; i++) {\n      node[i] = this.withIdRefPrefix(node[i]);\n    }\n    return node as RJSFSchema;\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData- - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: RJSFSchema, formData: T, rootSchema: RJSFSchema) {\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      const result = this.ajv\n        .addSchema(rootSchema, ROOT_SCHEMA_PREFIX)\n        .validate(this.withIdRefPrefix(schema), formData);\n      return result as boolean;\n    } catch (e) {\n      return false;\n    } finally {\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(ROOT_SCHEMA_PREFIX);\n    }\n  }\n\n  /** Recursively prefixes all $ref's in a schema with `ROOT_SCHEMA_PREFIX`\n   * This is used in isValid to make references to the rootSchema\n   *\n   * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @protected\n   */\n  protected withIdRefPrefix(schemaNode: RJSFSchema): RJSFSchema {\n    if (schemaNode.constructor === Object) {\n      return this.withIdRefPrefixObject({ ...schemaNode });\n    }\n    if (Array.isArray(schemaNode)) {\n      return this.withIdRefPrefixArray([...schemaNode]);\n    }\n    return schemaNode;\n  }\n}\n","import { ValidatorType } from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport AJV8Validator from \"./validator\";\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n */\nexport default function customizeValidator<T = any>(\n  options: CustomValidatorOptionsType = {},\n  localizer?: Localizer\n): ValidatorType<T> {\n  return new AJV8Validator<T>(options, localizer);\n}\n","import customizeValidator from \"./customizeValidator\";\n\nexport { customizeValidator };\nexport * from \"./types\";\n\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","allErrors","multipleOfPrecision","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","ajv","Ajv","addFormats","addFormat","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","ROOT_SCHEMA_PREFIX","AJV8Validator","constructor","options","localizer","toErrorSchema","errors","length","reduce","errorSchema","error","property","message","path","toPath","parent","splice","segment","slice","__errors","concat","toErrorList","fieldPath","errorList","ERRORS_KEY","map","join","stack","acc","key","createErrorHandler","formData","handler","addError","push","formObject","value","unwrapErrorHandler","errorHandler","transformRJSFValidationErrors","e","instancePath","keyword","params","schemaPath","replace","name","trim","validateFormData","schema","customValidate","transformErrors","rootSchema","newFormData","getDefaultFormState","validationError","validate","err","noProperMetaSchema","includes","$schema","userErrorSchema","mergeValidationData","withIdRefPrefixObject","node","realObj","REF_KEY","startsWith","withIdRefPrefix","withIdRefPrefixArray","i","isValid","result","addSchema","removeSchema","schemaNode","customizeValidator"],"mappings":"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"}
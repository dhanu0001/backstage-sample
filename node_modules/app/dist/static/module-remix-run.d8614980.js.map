{"version":3,"sources":["webpack://app/../node_modules/@remix-run/router/dist/router.js"],"names":["_extends","target","i","source","key","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","entry","index","createMemoryLocation","clampIndex","action","listener","n","getCurrentLocation","to","state","location","createLocation","warning$1","createPath","nextLocation","delta","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","pathname","search","hash","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","createHashHref","base","href","url","hashIndex","validateHashLocation","cond","message","createKey","getHistoryState","current","_ref","path","parsedPath","searchIndex","getLocation","createHref","validateLocation","handlePop","history","push","historyState","replace","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","treePath","id","invariant","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","parentsMeta","meta","joinPaths","routesMeta","computeScore","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","initialScore","score","segment","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","normalizePathname","generatePath","params","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","pathnameBase","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","caseSensitive","warning","regexpSource","value","error","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativePath","getInvalidPathError","char","field","dest","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","headers","AbortedDeferredError","DeferredData","reject","r","onAbort","acc","promise","subscriber","v","k","signal","aborted","resolve","_ref2","unwrapTrackedPromise","isTrackedPromise","defer","redirect","ErrorResponse","status","statusText","isRouteErrorResponse","IDLE_NAVIGATION","IDLE_FETCHER","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","router","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","historyAction","startNavigation","dispose","deleteFetcher","subscribe","updateState","newState","completeNavigation","_state$navigation$for","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","preventScrollReset","revalidate","interruptActiveLoads","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","pendingError","findNearestBoundary","actionOutput","handleAction","shortCircuited","loaderData","errors","handleLoaders","navigation","result","actionMatch","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","overrideNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","_ref8","resolveDeferredResults","_ref9","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","userMatches","createUseMatchesMatch","y","unstable_createStaticHandler","query","queryImpl","queryRoute","routeData","shortCircuitState","matchRequest","submit","loadRouteData","e","isRouteRequest","method","context","pendingActionError","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","getStaticContextFromError","isFetcher","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","formMethod","formAction","formEncType","formData","boundaryId","boundaryMatches","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","type","skipRedirects","resultType","abortPromise","onReject","handler","contentType","statusCode","foundError","loaderHeaders","mergedLoaderData","isRevalidatingLoader","unwrap"],"mappings":"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","file":"static/module-remix-run.d8614980.js","sourcesContent":["/**\n * @remix-run/router v1.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state);\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        const fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(request) {\n    let {\n      location,\n      result\n    } = await queryImpl(request);\n\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location\n    }, result);\n  }\n\n  async function queryRoute(request, routeId) {\n    let {\n      result\n    } = await queryImpl(request, routeId);\n\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // While we always re-throw Responses returned from loaders/actions\n      // directly for route requests and prevent the unwrapping into an\n      // ErrorResponse, we still need this for error cases _prior_ the\n      // execution of the loader/action, such as a 404/405 error.\n      if (isRouteErrorResponse(error)) {\n        return new Response(error.data, {\n          status: error.status,\n          statusText: error.statusText\n        });\n      } // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n\n\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(request, routeId) {\n    invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    let {\n      location,\n      matches,\n      shortCircuitState\n    } = matchRequest(request, routeId);\n\n    try {\n      if (shortCircuitState) {\n        return {\n          location,\n          result: shortCircuitState\n        };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(request, matches, getTargetMatch(matches, location), routeId != null);\n        return {\n          location,\n          result\n        };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: _extends({}, result, {\n          actionData: null,\n          actionHeaders: {}\n        })\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return {\n          location,\n          result: e\n        };\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, isRouteRequest, pendingActionError) {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m, true, isRouteRequest))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  function matchRequest(req, routeId) {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (matches && routeId) {\n      matches = matches.filter(m => m.route.id === routeId);\n    } // Short circuit with a 404 if we match nothing\n\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n\n    return {\n      location,\n      matches\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, skipRedirects, isRouteRequest) {\n  if (skipRedirects === void 0) {\n    skipRedirects = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, signal, submission) {\n  let url = createURL(location).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\n\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };\n//# sourceMappingURL=router.js.map\n"],"sourceRoot":""}
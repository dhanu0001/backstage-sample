import { createApiRef, createRouteRef, createPlugin, createApiFactory, discoveryApiRef, createRoutableExtension, createComponentExtension } from '@backstage/core-plugin-api';
import { useEntity } from '@backstage/plugin-catalog-react';
import { InfoCard, MissingAnnotationEmptyState } from '@backstage/core-components';
import React, { Component } from 'react';
import { Routes, Route } from 'react-router';
import { Resizable } from 're-resizable';
import ZoomOutMapIcon from '@material-ui/icons/ZoomOutMap';
import { Card, CardHeader, Typography, CardContent } from '@material-ui/core';
import Alert from '@material-ui/lab/Alert';

const datadogApiRef = createApiRef({
  id: "plugin.datadog.service"
});
class DatadogApiClient {
  constructor(options) {
    this.discoveryApi = options.discoveryApi;
  }
}

const DATADOG_ANNOTATION_DASHBOARD_URL = "datadoghq.com/dashboard-url";
const DATADOG_ANNOTATION_GRAPH_TOKEN = "datadoghq.com/graph-token";
const DATADOG_ANNOTATION_GRAPH_SIZE = "datadoghq.com/graph-size";
const DATADOG_ANNOTATION_SITE = "datadoghq.com/site";
const useDatadogAppData = ({ entity }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const dashboardUrl = (_b = (_a = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _a[DATADOG_ANNOTATION_DASHBOARD_URL]) != null ? _b : "";
  const graphToken = (_d = (_c = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _c[DATADOG_ANNOTATION_GRAPH_TOKEN]) != null ? _d : "";
  const graphSize = (_f = (_e = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _e[DATADOG_ANNOTATION_GRAPH_SIZE]) != null ? _f : "medium";
  const site = (_h = (_g = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _g[DATADOG_ANNOTATION_SITE]) != null ? _h : "datadoghq.eu";
  if (!dashboardUrl && !graphToken) {
    throw new Error("'datadog' annotation is missing");
  }
  return { dashboardUrl, graphToken, graphSize, site };
};

const isDatadogDashboardAvailable = (entity) => {
  var _a;
  return Boolean((_a = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _a[DATADOG_ANNOTATION_DASHBOARD_URL]);
};
const isDatadogGraphAvailable = (entity) => {
  var _a;
  return Boolean((_a = entity == null ? void 0 : entity.metadata.annotations) == null ? void 0 : _a[DATADOG_ANNOTATION_GRAPH_TOKEN]);
};
const isDatadogAvailable = (entity) => isDatadogDashboardAvailable(entity) || isDatadogGraphAvailable(entity);
const entityContentRouteRef = createRouteRef({
  id: "Datadog Entity Content"
});
const datadogPlugin = createPlugin({
  id: "datadog",
  apis: [
    createApiFactory({
      api: datadogApiRef,
      deps: { discoveryApi: discoveryApiRef },
      factory: ({ discoveryApi }) => new DatadogApiClient({ discoveryApi })
    })
  ],
  routes: {
    entityContent: entityContentRouteRef
  }
});
const EntityDatadogContent = datadogPlugin.provide(createRoutableExtension({
  name: "EntityDatadogContent",
  component: () => Promise.resolve().then(function () { return Router$1; }).then((m) => m.Router),
  mountPoint: entityContentRouteRef
}));
const EntityDatadogGraphCard = datadogPlugin.provide(createComponentExtension({
  name: "EntityDatadogGraphCard",
  component: {
    lazy: () => Promise.resolve().then(function () { return GraphWidget$1; }).then((m) => m.GraphWidget)
  }
}));

const DatadogDashboardPage = ({ entity }) => {
  const { dashboardUrl } = useDatadogAppData({ entity });
  return /* @__PURE__ */ React.createElement(InfoCard, {
    title: "Datadog dashboard"
  }, /* @__PURE__ */ React.createElement(Resizable, {
    defaultSize: {
      width: "100%",
      height: 500
    },
    handleComponent: { bottomRight: /* @__PURE__ */ React.createElement(ZoomOutMapIcon, null) }
  }, /* @__PURE__ */ React.createElement("iframe", {
    title: "dashboard",
    src: `${dashboardUrl}`,
    style: {
      border: "none",
      height: "100%",
      width: "100%",
      resize: "both",
      overflow: "auto"
    }
  })));
};

const Router = () => {
  const { entity } = useEntity();
  return !isDatadogDashboardAvailable(entity) ? /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, {
    annotation: DATADOG_ANNOTATION_DASHBOARD_URL
  }) : /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(Route, {
    path: "/",
    element: /* @__PURE__ */ React.createElement(DatadogDashboardPage, {
      entity
    })
  }));
};

var Router$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Router: Router
});

class ErrorBoundary extends Component {
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  render() {
    if (this.state.hasError) {
      return /* @__PURE__ */ React.createElement(Alert, {
        severity: "error"
      }, "Something went wrong. Please make sure that you installed:", /* @__PURE__ */ React.createElement("strong", null, /* @__PURE__ */ React.createElement("a", {
        href: "https://github.com/RoadieHQ/backstage-plugin-datadog",
        target: "_blank",
        rel: "noopener noreferrer"
      }, "@roadiehq/backstage-plugin-datadog plugin")));
    }
    return this.props.children;
  }
}

const mapGraphSizeToDimensions = (graphSize) => {
  switch (graphSize) {
    case "small":
      return { width: 400, height: 200 };
    case "medium":
      return { width: 600, height: 300 };
    case "large":
      return { width: 800, height: 400 };
    case "x-large":
      return { width: 1e3, height: 500 };
    default:
      return { width: 600, height: 300 };
  }
};
const DatadogGraph = ({ entity }) => {
  const { graphToken, graphSize, site } = useDatadogAppData({ entity });
  const { width, height } = mapGraphSizeToDimensions(graphSize);
  return /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, {
    title: /* @__PURE__ */ React.createElement(Typography, {
      variant: "h5"
    }, "Datadog Graph")
  }), /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement("iframe", {
    title: "graph",
    src: `https://app.${site}/graph/embed?token=${graphToken}&height=${height}&width=${width}&legend=true`,
    width,
    height,
    frameBorder: "0"
  })));
};
const GraphWidget = () => {
  const { entity } = useEntity();
  return !isDatadogGraphAvailable(entity) ? /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, {
    annotation: DATADOG_ANNOTATION_GRAPH_TOKEN
  }) : /* @__PURE__ */ React.createElement(ErrorBoundary, null, /* @__PURE__ */ React.createElement(DatadogGraph, {
    entity
  }));
};

var GraphWidget$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  GraphWidget: GraphWidget
});

export { DatadogApiClient, EntityDatadogContent, EntityDatadogGraphCard, GraphWidget, Router, datadogApiRef, isDatadogAvailable, isDatadogDashboardAvailable, isDatadogGraphAvailable, datadogPlugin as plugin };
//# sourceMappingURL=index.esm.js.map
